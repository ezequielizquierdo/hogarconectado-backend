const mongoose = require('mongoose');

async function ejemplosPaginacion() {
  console.log('=== EJEMPLOS DE PAGINACI√ìN PARA FRONTEND ===\n');
  
  console.log('üéØ CASOS DE USO COMUNES:\n');
  
  // Ejemplo 1: Paginaci√≥n b√°sica
  console.log('1Ô∏è‚É£ PAGINACI√ìN B√ÅSICA:');
  console.log('   Primera p√°gina (20 productos por defecto):');
  console.log('   GET /api/productos?pagina=1');
  console.log('   ‚úÖ Respuesta: datos + informaci√≥n de navegaci√≥n\n');
  
  console.log('   Segunda p√°gina:');
  console.log('   GET /api/productos?pagina=2');
  console.log('   ‚úÖ Respuesta: productos 21-40 + navegaci√≥n\n');
  
  // Ejemplo 2: Diferentes tama√±os de p√°gina
  console.log('2Ô∏è‚É£ DIFERENTES TAMA√ëOS DE P√ÅGINA:');
  console.log('   Mostrar 10 productos por p√°gina:');
  console.log('   GET /api/productos?pagina=1&limite=10');
  console.log('   ‚úÖ Total p√°ginas: 13 (130 productos √∑ 10)\n');
  
  console.log('   Mostrar 50 productos por p√°gina:');
  console.log('   GET /api/productos?pagina=1&limite=50');
  console.log('   ‚úÖ Total p√°ginas: 3 (130 productos √∑ 50)\n');
  
  // Ejemplo 3: Navegaci√≥n con filtros
  console.log('3Ô∏è‚É£ NAVEGACI√ìN CON FILTROS:');
  console.log('   B√∫squeda paginada:');
  console.log('   GET /api/productos?buscar=samsung&pagina=1&limite=10');
  console.log('   ‚úÖ Solo productos Samsung con paginaci√≥n\n');
  
  console.log('   Filtro por categor√≠a:');
  console.log('   GET /api/productos?categoria=CATEGORIA_ID&pagina=1');
  console.log('   ‚úÖ Solo productos de esa categor√≠a paginados\n');
  
  // Ejemplo 4: Ordenamiento
  console.log('4Ô∏è‚É£ ORDENAMIENTO PAGINADO:');
  console.log('   Por precio (menor a mayor):');
  console.log('   GET /api/productos?ordenar=precio-asc&pagina=1');
  console.log('   ‚úÖ Productos ordenados por precio + paginaci√≥n\n');
  
  console.log('   Alfab√©tico:');
  console.log('   GET /api/productos?ordenar=alfabetico&pagina=1');
  console.log('   ‚úÖ Productos A-Z + paginaci√≥n\n');
  
  // Informaci√≥n de respuesta
  console.log('üì§ INFORMACI√ìN EN LA RESPUESTA:');
  console.log(`{
  "success": true,
  "data": [...], // Array de productos
  "pagination": {
    "pagina": 1,                    // P√°gina actual
    "limite": 20,                   // Productos por p√°gina
    "total": 130,                   // Total de productos
    "totalPaginas": 7,              // Total de p√°ginas
    "tienePaginaAnterior": false,   // ¬øHay p√°gina anterior?
    "tienePaginaSiguiente": true,   // ¬øHay p√°gina siguiente?
    "paginaAnterior": null,         // N√∫mero de p√°gina anterior
    "paginaSiguiente": 2,           // N√∫mero de p√°gina siguiente
    "desde": 1,                     // Producto inicial mostrado
    "hasta": 20                     // Producto final mostrado
  },
  "filtros": {                      // Filtros aplicados
    "categoria": null,
    "marca": null,
    "disponible": "true",
    "buscar": null,
    "ordenar": "recientes"
  }
}\n`);
  
  console.log('üé® IMPLEMENTACI√ìN EN FRONTEND:\n');
  
  console.log('üì± COMPONENTE DE PAGINACI√ìN:');
  console.log(`function Paginacion({ pagination, onPageChange }) {
  return (
    <div className="pagination">
      {/* Bot√≥n Anterior */}
      {pagination.tienePaginaAnterior && (
        <button onClick={() => onPageChange(pagination.paginaAnterior)}>
          ‚Üê Anterior
        </button>
      )}
      
      {/* Informaci√≥n de p√°gina */}
      <span>
        P√°gina {pagination.pagina} de {pagination.totalPaginas}
        (Mostrando {pagination.desde}-{pagination.hasta} de {pagination.total})
      </span>
      
      {/* Bot√≥n Siguiente */}
      {pagination.tienePaginaSiguiente && (
        <button onClick={() => onPageChange(pagination.paginaSiguiente)}>
          Siguiente ‚Üí
        </button>
      )}
    </div>
  );
}\n`);
  
  console.log('üîÑ FUNCI√ìN DE NAVEGACI√ìN:');
  console.log(`function manejarCambioPagina(nuevaPagina, filtros = {}) {
  const params = new URLSearchParams({
    pagina: nuevaPagina,
    limite: 20,
    ...filtros
  });
  
  fetch(\`/api/productos?\${params}\`)
    .then(response => response.json())
    .then(data => {
      // Actualizar productos mostrados
      setProductos(data.data);
      // Actualizar informaci√≥n de paginaci√≥n
      setPaginacion(data.pagination);
    });
}\n`);
  
  console.log('üéØ SELECTOR DE PRODUCTOS POR P√ÅGINA:');
  console.log(`<select onChange={(e) => cambiarLimite(e.target.value)}>
  <option value="10">10 por p√°gina</option>
  <option value="20" selected>20 por p√°gina</option>
  <option value="50">50 por p√°gina</option>
</select>\n`);
  
  console.log('‚úÖ VENTAJAS DE ESTA IMPLEMENTACI√ìN:');
  console.log('   ‚Ä¢ ‚ö° Rendimiento optimizado (m√°ximo 20 productos por defecto)');
  console.log('   ‚Ä¢ üß≠ Navegaci√≥n completa (anterior/siguiente/total)');
  console.log('   ‚Ä¢ üîç Compatible con filtros y b√∫squedas');
  console.log('   ‚Ä¢ üì± Frontend-friendly con toda la metadata necesaria');
  console.log('   ‚Ä¢ üõ°Ô∏è Validaci√≥n de par√°metros (l√≠mites m√°ximos)');
  console.log('   ‚Ä¢ üìä Informaci√≥n de rango (desde/hasta productos)');
  
  console.log('\nüéâ ¬°PAGINACI√ìN LISTA PARA USAR EN TU FRONTEND!');
}

ejemplosPaginacion();
